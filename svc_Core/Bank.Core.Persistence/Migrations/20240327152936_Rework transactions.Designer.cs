// <auto-generated />
using System;
using Bank.Core.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bank.Core.Persistence.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20240327152936_Rework transactions")]
    partial class Reworktransactions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bank.Core.Domain.Events.AccountEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountEvent");
                });

            modelBuilder.Entity("Bank.Core.Domain.StoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Bank.Core.Persistence.Utils.CurrencyExhangeRateRecord", b =>
                {
                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Source", "Target");

                    b.ToTable("CurrencyExhangeRates");
                });

            modelBuilder.Entity("Bank.Core.Domain.Account", b =>
                {
                    b.HasBaseType("Bank.Core.Domain.StoredModel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.HasIndex("Name", "UserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Bank.Core.Domain.User", b =>
                {
                    b.HasBaseType("Bank.Core.Domain.StoredModel");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bank.Core.Domain.Events.AccountEvent", b =>
                {
                    b.HasOne("Bank.Core.Domain.Account", null)
                        .WithMany("Events")
                        .HasForeignKey("AccountId");

                    b.OwnsOne("Bank.Core.Domain.Events.BalanceChange", "BalanceChange", b1 =>
                        {
                            b1.Property<Guid>("AccountEventId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<int>("EventType")
                                .HasColumnType("integer");

                            b1.HasKey("AccountEventId");

                            b1.HasIndex("AccountId");

                            b1.ToTable("AccountEvent");

                            b1.WithOwner()
                                .HasForeignKey("AccountEventId");

                            b1.HasOne("Bank.Core.Domain.Account", "Account")
                                .WithMany()
                                .HasForeignKey("AccountId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.OwnsOne("Bank.Core.Domain.Events.CreditPayment", "CreditPayment", b2 =>
                                {
                                    b2.Property<Guid>("BalanceChangeAccountEventId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("CreditId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("BalanceChangeAccountEventId");

                                    b2.ToTable("AccountEvent");

                                    b2.WithOwner()
                                        .HasForeignKey("BalanceChangeAccountEventId");
                                });

                            b1.OwnsOne("Bank.Common.Money.Money", "ForeignValue", b2 =>
                                {
                                    b2.Property<Guid>("BalanceChangeAccountEventId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("numeric");

                                    b2.Property<int>("Currency")
                                        .HasColumnType("integer");

                                    b2.HasKey("BalanceChangeAccountEventId");

                                    b2.ToTable("AccountEvent");

                                    b2.WithOwner()
                                        .HasForeignKey("BalanceChangeAccountEventId");
                                });

                            b1.OwnsOne("Bank.Common.Money.Money", "NativeValue", b2 =>
                                {
                                    b2.Property<Guid>("BalanceChangeAccountEventId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("numeric");

                                    b2.Property<int>("Currency")
                                        .HasColumnType("integer");

                                    b2.HasKey("BalanceChangeAccountEventId");

                                    b2.ToTable("AccountEvent");

                                    b2.WithOwner()
                                        .HasForeignKey("BalanceChangeAccountEventId");
                                });

                            b1.Navigation("Account");

                            b1.Navigation("CreditPayment");

                            b1.Navigation("ForeignValue")
                                .IsRequired();

                            b1.Navigation("NativeValue")
                                .IsRequired();
                        });

                    b.OwnsOne("Bank.Core.Domain.Events.Transfer", "Transfer", b1 =>
                        {
                            b1.Property<Guid>("AccountEventId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ResolvedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("State")
                                .HasColumnType("integer");

                            b1.HasKey("AccountEventId");

                            b1.ToTable("AccountEvent");

                            b1.WithOwner()
                                .HasForeignKey("AccountEventId");

                            b1.OwnsOne("Bank.Core.Domain.Events.BalanceChange", "Source", b2 =>
                                {
                                    b2.Property<Guid>("TransferAccountEventId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("AccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("EventType")
                                        .HasColumnType("integer");

                                    b2.HasKey("TransferAccountEventId");

                                    b2.HasIndex("AccountId");

                                    b2.ToTable("AccountEvent");

                                    b2.HasOne("Bank.Core.Domain.Account", "Account")
                                        .WithMany()
                                        .HasForeignKey("AccountId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("TransferAccountEventId");

                                    b2.OwnsOne("Bank.Core.Domain.Events.CreditPayment", "CreditPayment", b3 =>
                                        {
                                            b3.Property<Guid>("BalanceChangeTransferAccountEventId")
                                                .HasColumnType("uuid");

                                            b3.Property<Guid>("CreditId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("BalanceChangeTransferAccountEventId");

                                            b3.ToTable("AccountEvent");

                                            b3.WithOwner()
                                                .HasForeignKey("BalanceChangeTransferAccountEventId");
                                        });

                                    b2.OwnsOne("Bank.Common.Money.Money", "ForeignValue", b3 =>
                                        {
                                            b3.Property<Guid>("BalanceChangeTransferAccountEventId")
                                                .HasColumnType("uuid");

                                            b3.Property<decimal>("Amount")
                                                .HasColumnType("numeric");

                                            b3.Property<int>("Currency")
                                                .HasColumnType("integer");

                                            b3.HasKey("BalanceChangeTransferAccountEventId");

                                            b3.ToTable("AccountEvent");

                                            b3.WithOwner()
                                                .HasForeignKey("BalanceChangeTransferAccountEventId");
                                        });

                                    b2.OwnsOne("Bank.Common.Money.Money", "NativeValue", b3 =>
                                        {
                                            b3.Property<Guid>("BalanceChangeTransferAccountEventId")
                                                .HasColumnType("uuid");

                                            b3.Property<decimal>("Amount")
                                                .HasColumnType("numeric");

                                            b3.Property<int>("Currency")
                                                .HasColumnType("integer");

                                            b3.HasKey("BalanceChangeTransferAccountEventId");

                                            b3.ToTable("AccountEvent");

                                            b3.WithOwner()
                                                .HasForeignKey("BalanceChangeTransferAccountEventId");
                                        });

                                    b2.Navigation("Account");

                                    b2.Navigation("CreditPayment");

                                    b2.Navigation("ForeignValue")
                                        .IsRequired();

                                    b2.Navigation("NativeValue")
                                        .IsRequired();
                                });

                            b1.OwnsOne("Bank.Core.Domain.Events.BalanceChange", "Target", b2 =>
                                {
                                    b2.Property<Guid>("TransferAccountEventId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("AccountId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("EventType")
                                        .HasColumnType("integer");

                                    b2.HasKey("TransferAccountEventId");

                                    b2.HasIndex("AccountId");

                                    b2.ToTable("AccountEvent");

                                    b2.HasOne("Bank.Core.Domain.Account", "Account")
                                        .WithMany()
                                        .HasForeignKey("AccountId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("TransferAccountEventId");

                                    b2.OwnsOne("Bank.Core.Domain.Events.CreditPayment", "CreditPayment", b3 =>
                                        {
                                            b3.Property<Guid>("BalanceChangeTransferAccountEventId")
                                                .HasColumnType("uuid");

                                            b3.Property<Guid>("CreditId")
                                                .HasColumnType("uuid");

                                            b3.HasKey("BalanceChangeTransferAccountEventId");

                                            b3.ToTable("AccountEvent");

                                            b3.WithOwner()
                                                .HasForeignKey("BalanceChangeTransferAccountEventId");
                                        });

                                    b2.OwnsOne("Bank.Common.Money.Money", "ForeignValue", b3 =>
                                        {
                                            b3.Property<Guid>("BalanceChangeTransferAccountEventId")
                                                .HasColumnType("uuid");

                                            b3.Property<decimal>("Amount")
                                                .HasColumnType("numeric");

                                            b3.Property<int>("Currency")
                                                .HasColumnType("integer");

                                            b3.HasKey("BalanceChangeTransferAccountEventId");

                                            b3.ToTable("AccountEvent");

                                            b3.WithOwner()
                                                .HasForeignKey("BalanceChangeTransferAccountEventId");
                                        });

                                    b2.OwnsOne("Bank.Common.Money.Money", "NativeValue", b3 =>
                                        {
                                            b3.Property<Guid>("BalanceChangeTransferAccountEventId")
                                                .HasColumnType("uuid");

                                            b3.Property<decimal>("Amount")
                                                .HasColumnType("numeric");

                                            b3.Property<int>("Currency")
                                                .HasColumnType("integer");

                                            b3.HasKey("BalanceChangeTransferAccountEventId");

                                            b3.ToTable("AccountEvent");

                                            b3.WithOwner()
                                                .HasForeignKey("BalanceChangeTransferAccountEventId");
                                        });

                                    b2.Navigation("Account");

                                    b2.Navigation("CreditPayment");

                                    b2.Navigation("ForeignValue")
                                        .IsRequired();

                                    b2.Navigation("NativeValue")
                                        .IsRequired();
                                });

                            b1.Navigation("Source")
                                .IsRequired();

                            b1.Navigation("Target")
                                .IsRequired();
                        });

                    b.Navigation("BalanceChange");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Bank.Core.Domain.Account", b =>
                {
                    b.HasOne("Bank.Core.Domain.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Bank.Common.Money.Money", "Balance", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.Property<uint>("_TableSharingConcurrencyTokenConvention_Version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("xid")
                                .HasColumnName("xmin");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bank.Core.Domain.Account", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Bank.Core.Domain.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
