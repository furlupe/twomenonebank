// <auto-generated />
using System;
using Bank.Core.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bank.Core.Persistence.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20240303081534_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bank.Core.Domain.Events.BalanceChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("BalanceChange");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BalanceChange");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Bank.Core.Domain.StoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Bank.Core.Domain.Events.Deposit", b =>
                {
                    b.HasBaseType("Bank.Core.Domain.Events.BalanceChange");

                    b.HasDiscriminator().HasValue("Deposit");
                });

            modelBuilder.Entity("Bank.Core.Domain.Events.Transfer", b =>
                {
                    b.HasBaseType("Bank.Core.Domain.Events.BalanceChange");

                    b.Property<Guid>("DepositId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WithdrawalId")
                        .HasColumnType("uuid");

                    b.HasIndex("DepositId");

                    b.HasIndex("WithdrawalId");

                    b.HasDiscriminator().HasValue("Transfer");
                });

            modelBuilder.Entity("Bank.Core.Domain.Events.Withdrawal", b =>
                {
                    b.HasBaseType("Bank.Core.Domain.Events.BalanceChange");

                    b.HasDiscriminator().HasValue("Withdrawal");
                });

            modelBuilder.Entity("Bank.Core.Domain.Account", b =>
                {
                    b.HasBaseType("Bank.Core.Domain.StoredModel");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Bank.Core.Domain.User", b =>
                {
                    b.HasBaseType("Bank.Core.Domain.StoredModel");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bank.Core.Domain.Events.BalanceChange", b =>
                {
                    b.HasOne("Bank.Core.Domain.Account", "Account")
                        .WithMany("BalanceChanges")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bank.Core.Domain.Events.Transfer", b =>
                {
                    b.HasOne("Bank.Core.Domain.Events.Deposit", "Deposit")
                        .WithMany()
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bank.Core.Domain.Events.Withdrawal", "Withdrawal")
                        .WithMany()
                        .HasForeignKey("WithdrawalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");

                    b.Navigation("Withdrawal");
                });

            modelBuilder.Entity("Bank.Core.Domain.Account", b =>
                {
                    b.HasOne("Bank.Core.Domain.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bank.Core.Domain.Account", b =>
                {
                    b.Navigation("BalanceChanges");
                });

            modelBuilder.Entity("Bank.Core.Domain.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
